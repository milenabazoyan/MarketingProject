{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to FashionTrendForecasting Documentation","text":"<p>Group 4 - Marketing Analytics Project for Fashion Trend Forecasting</p> <p>Creators: Anahit Manukyan, Sate Antaranyan, Milena Bazoyan, Lusine Torosyan</p>"},{"location":"#overview","title":"Overview","text":"<p>In the fast-paced world of fashion, keeping up with the latest trends is crucial for brands to stay competitive. Our project, Fashion Trend Forecasting, utilizes advanced data analytics to predict upcoming fashion trends effectively. FashionTrendForecasting is a Python package designed for fashion industry professionals and analysts who wish to leverage machine learning to forecast fashion trends. This package provides tools to evaluate various machine learning models and select the best one for predicting upcoming fashion trends based on historical data and emerging patterns.</p>"},{"location":"#problem","title":"Problem","text":"<p>The fashion industry is dynamic, with rapid changes in consumer preferences and trends. It can be challenging for fashion brands to predict which trends will dominate the market. Traditional methods may not adapt quickly enough to the fast-paced fashion world.</p>"},{"location":"#solution","title":"Solution","text":"<p>FashionTrendForecasting offers a robust solution by enabling users to apply different machine learning models, such as RandomForest, DesicionTree, GradientBoosting, to their data and identify which model predicts trends most accurately. This approach allows brands to be more agile and responsive to market changes, ensuring they capitalize on trends as they emerge. </p>"},{"location":"#expected-outcomes","title":"Expected Outcomes","text":"<p>By utilizing the FashionTrendForecasting package, users can expect the following outcomes:</p> <ol> <li> <p>Accurate Trend Prediction: Use machine learning models to forecast fashion trends accurately, enabling active decision-making.</p> </li> <li> <p>Enhanced Decision Making: Use insights from data analytics to make informed decisions about product lines and marketing strategies.</p> </li> <li> <p>Increased Market Responsiveness: Quickly adapt to changing fashion trends, helping brands maintain competitive advantages.</p> </li> <li> <p>Cost Efficiency: Reduce wasted resources on less popular trends by making data-driven decisions.</p> </li> </ol>"},{"location":"#features","title":"Features","text":"<ol> <li>Data Input: Accepts various data forms, including Item, Name, Category, Material, Style, Color, Sales Volume, Trend Score.</li> <li>Model Selection: Automatically evaluates and allows the user to select the best machine learning model for their specific dataset.</li> <li>Milena, Lusine</li> </ol>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To begin using FashionTrendForecasting, make sure Python is installed on your system along with all required dependencies. For more information follow to our Installation page. </p>"},{"location":"#documentation-sections","title":"Documentation Sections","text":"<p>Homepage: Overview of the FashionTrendForecasting package and its capabilities.</p> <p>API: Documentation of the API endpoints provided by FashionTrendForecasting.</p> <p>DB: Details on the database schema, data generation, and how to interact with the database.</p> <p>Model: Explanation of the Machine Learning Models and its implementations.</p> <p>Logger: Information about the logging setup used within FashionTrendForecasting.</p> <p>Installation: Setup instructions and dependencies. </p>"},{"location":"#support","title":"Support","text":"<p>For any issues, questions, or feedback regarding the FashionTrendForecasting package, please do not hesitate to contact our support team. We are dedicated to providing you with the assistance you need to make the most out of FashionTrendForecasting.</p> <p>Thank you for choosing FashionTrendForecasting package! We are excited to be a part of your journey in utilizing the power of machine learning for fashion trend forecasting. We hope our tool strengthens your decision-making and enhances your strategic initiatives.</p>"},{"location":"api/","title":"API Documentation","text":""},{"location":"api/#overview","title":"Overview","text":"<p>This API provides endpoints for managing and retrieving fashion item and trend data. It supports operations for querying trends based on seasons and managing fashion items. The API is tailored to assist fashion industry professionals and enthusiasts in keeping up with current trends and effectively managing inventory.</p>"},{"location":"api/#setup-instructions","title":"Setup Instructions","text":""},{"location":"api/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or higher</li> <li>FastAPI</li> <li>Uvicorn</li> </ul>"},{"location":"api/#environment-setup","title":"Environment Setup","text":"<ol> <li>Create and activate a virtual environment: <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows use `venv\\Scripts\\activate`\n</code></pre></li> <li>Install required packages:   Before proceeding, ensure all dependencies are installed by running:   <pre><code>pip install -r requirements.txt\n</code></pre></li> <li>Prepare the database:   Before running the API, you must set up and populate the database by executing:   <pre><code>python creating_tables_and_filling_data.py\n</code></pre></li> <li>Run the API: <pre><code>python run.py\n</code></pre></li> </ol>"},{"location":"api/#items-api-endpoints","title":"Items API Endpoints","text":""},{"location":"api/#1-create-item","title":"1. Create Item","text":"<ul> <li>URL: <code>/items/</code></li> <li>Method: POST</li> <li>Query Parameters: None</li> <li>Description: Adds a new item to the database with detailed information such as name, category, material, style, color, and picture ID.</li> <li>Request Body: An instance of <code>ItemDTO</code> with fields:</li> <li><code>name</code>: string</li> <li><code>category</code>: string</li> <li><code>material</code>: string</li> <li><code>style</code>: string</li> <li><code>color</code>: string</li> <li> <p><code>picture_id</code>: integer</p> </li> <li> <p>Responses:</p> </li> <li>200 OK: Item successfully created and the details of the new item are returned.</li> <li>400 Bad Request: Validation error if the input data does not match the <code>ItemDTO</code> schema.</li> </ul>"},{"location":"api/#2-delete-item-by-id","title":"2. Delete Item by ID","text":"<ul> <li>URL: <code>/items/{id}</code></li> <li>Method: DELETE</li> <li>Query Parameters: None</li> <li> <p>Description: Deletes an item from the database by its unique identifier.</p> </li> <li> <p>Path Parameters:</p> </li> <li><code>id</code>: integer (Unique identifier of the item to delete)</li> <li>Responses:</li> <li>200 OK: Item successfully deleted.</li> <li>404 Not Found: No item found with the specified ID.</li> </ul>"},{"location":"api/#3-update-item","title":"3. Update Item","text":"<ul> <li>URL: <code>/items/{id}</code></li> <li>Method: PUT</li> <li>Query Parameters: None</li> <li>Description: Updates the details of an existing item in the database by its ID.</li> <li>Path Parameters:</li> <li><code>id</code>: integer (Unique identifier of the item to update)</li> <li>Request Body: An instance of <code>ItemUpdateDTO</code> with optional fields:</li> <li><code>name</code>: string</li> <li><code>category</code>: string</li> <li><code>material</code>: string</li> <li><code>style</code>: string</li> <li><code>color</code>: string</li> <li><code>picture_id</code>: integer</li> <li>Responses:</li> <li>200 OK: Item successfully updated with the new details provided.</li> <li>404 Not Found: No item found with the specified ID to update.</li> </ul>"},{"location":"api/#4-get-item-by-id","title":"4. Get Item by ID","text":"<ul> <li>URL: <code>/items/{id}</code></li> <li>Method: GET</li> <li>Query Parameters: None</li> <li>Description: Retrieves details of a specific item by its unique identifier.</li> <li>Path Parameters:</li> <li><code>id</code>: integer (Unique identifier of the item)</li> <li>Responses:</li> <li>200 OK: Details of the item retrieved successfully.</li> <li>404 Not Found: No item found with the specified ID.</li> </ul>"},{"location":"api/#5-get-items-by-season","title":"5. Get Items by Season","text":"<ul> <li>URL: <code>/items/seasons/{season}</code></li> <li>Method: GET</li> <li>Query Parameters:</li> <li><code>limit</code>: integer (Optional, default is 0, specifies the number of items to retrieve)</li> <li><code>offset</code>: integer (Optional, default is 0, specifies the starting point for query results)</li> <li>Description: Fetches items associated with a specific fashion season. Supports pagination through <code>limit</code> and <code>offset</code>.</li> <li>Path Parameters:</li> <li><code>season</code>: string (A season such as 'Spring', 'Summer', 'Autumn', 'Winter')</li> <li>Responses:</li> <li>200 OK: Successfully retrieves items for the specified season along with pagination details.</li> <li>400 Bad Request: Invalid season parameter provided.</li> </ul>"},{"location":"api/#trends-api-endpoint","title":"Trends API Endpoint","text":""},{"location":"api/#get-trends-by-season","title":"Get Trends by Season","text":"<ul> <li>URL: <code>/trends/seasons/{season}</code></li> <li>Method: GET</li> <li>Query Parameters: None</li> <li>Description: Retrieves the most trending item for a specified season. This endpoint is useful for analysts and retailers to identify top-performing products for specific seasons, helping in inventory planning and marketing strategies.</li> <li>Path Parameters:</li> <li><code>season</code>: string (A season such as 'Spring', 'Summer', 'Autumn', 'Winter')</li> <li>Responses:</li> <li>200 OK: Successfully retrieves the most trending item of the season. Returns a JSON object containing the details of the item.</li> <li>400 Bad Request: Invalid season parameter provided, unable to process the request.</li> </ul>"},{"location":"api/#additional-notes","title":"Additional Notes","text":"<ul> <li> <p>Logging: Ensure to check the logs for debugging and troubleshooting API issues. The configured logger in <code>utilities/logger.py</code> can be adjusted according to development or production needs to capture detailed information about the API's operations.</p> </li> <li> <p>Security Enhancements: Future updates may include additional security features to secure API access, such as implementing OAuth for authentication and HTTPS for secure data transmission.</p> </li> <li> <p>Feedback and Contributions: We welcome contributions and feedback on our API. If you encounter any issues or have suggestions for improvements, please submit them to our project's repository issue tracker.</p> </li> <li> <p>Versioning: We aim to maintain backward compatibility with our API endpoints. However, in the case of major changes that could break existing functionality, we will increment the major version number and provide migration guides.</p> </li> <li> <p>Rate Limits: Be mindful of rate limits to avoid being throttled. If you require higher limits for your use case, please contact our support to discuss an increase.</p> </li> </ul>"},{"location":"db/","title":"Database Documentation","text":""},{"location":"db/#introduction","title":"Introduction","text":"<p>This documentation covers the data generation, schema details, CRUD, and Interactions functionality of the FashionTrendForecasting package, which utilizes an SQLite database to store and manage fashion item data and associated sales and trends.</p>"},{"location":"db/#data-generation","title":"Data Generation","text":"<p>The data generation scripts use the Faker library to create realistic mock data for a clothing <code>item</code>, <code>material</code>, <code>category</code>, <code>style</code>, <code>color</code>, <code>picture_id</code>, <code>sales_outcome</code>, <code>trend_score</code>, <code>search_frequencies</code>, and <code>predicted_trend_score</code> (this is initially set to 0 and is updated after). </p>"},{"location":"db/#database-schema-and-filling-data-into-it","title":"Database Schema and filling data into it","text":"<p>Creates a separate class for each of the following tables:</p> <ol> <li>Item</li> <li>Picture</li> <li>Sales_Outcomes</li> <li>Trend</li> <li>Search_Frequency</li> </ol> <p>Defines connections to other tables from our main Item table.</p> <p>It uses the following functions:</p> <p><code>random.randint()</code> for generating numerical data.(sales_volumne, trend_score etc)</p> <p><code>fake.date()</code> for date data.</p> <p><code>random.choice()</code> for categorical data (item, season, etc)</p> <p>It fills everything into an SQLite db file in a separate folder for easier access from different levels.</p>"},{"location":"db/#sql-operations","title":"SQL Operations","text":"<p>SQL operations are all included in the 'sql_interactions.py' file, which has 2 separate classes, CRUD and Interactions, with the following functions.</p>"},{"location":"db/#crud-class-functions","title":"CRUD class functions","text":"<ol> <li>add_item_with_details(self, item_data: dict) -&gt; bool: Adds new item to the table</li> <li>get_item_data_by_id(self, item_id: int) -&gt; list: Gives item information from item table by the given id</li> <li>get_item_by_id(self, item_id): Gives object from item table by the given id</li> <li>update_item(self, item_id: int, update_data: dict) -&gt; bool: updates item with the given info</li> <li>delete_item(self, item_id: int) -&gt; bool:Deletes item with the given id</li> </ol>"},{"location":"db/#interactions-class-functions","title":"Interactions class functions","text":"<ol> <li>select_all_as_df(self, table_name: str) -&gt; pd.DataFrame: Returns all rows and columns of the given table.</li> <li>get_seasonal_trend_items_top_n_offset_k(self, season: str, n: int, k: int) -&gt; list: Extracts the top n popular items for a specified season based on trend scores.</li> <li>get_popularity_metrics(self) -&gt; pd.DataFrame: Use the Search_Frequency entity to identify items with the highest search_count, indicating current consumer interest.</li> <li>get_sales_performance(self) -&gt; pd.DataFrame: Functionality: Sales_Outcome to determine which items have the highest sales_volume.</li> <li>get_detailed_item_trends(self) -&gt; pd.DataFrame: Functionality: Returns detailed attributes of items along with their trend score.</li> <li>get_sales_volume(self) -&gt; pd.DataFrame: Functionality: Returns detailed attributes of items along with their sales volume.</li> <li>get_top_n_items_with_highest_sales(self, season: str, n: int) -&gt; pd.DataFrame: Get item with the highest trend score for a given season.</li> </ol>"},{"location":"installation/","title":"Installation Documentation","text":"<p>To install FashionTrendForecasting, use the following pip command: <pre><code>pip install FashionTrendForecasting==0.1.0\n</code></pre></p>"},{"location":"installation/#getting-started","title":"Getting Started","text":"<p>To run the project, follow these steps:</p> <ul> <li>Install Dependencies: </li> </ul> <p>Install all required packages using the command below: </p> <pre><code>pip install -r requirements.txt\n</code></pre> <ul> <li>Run the Application: Start the application by running: </li> </ul> <p><pre><code> python run.py\n</code></pre>  Access the Application:</p> <p>\u25e6 Open the Application: Navigate to http://127.0.0.1:8000 in your browser.</p> <p>\u25e6 API Documentation: To access the API documentation, visit http://127.0.0.1:8000/docs.</p>"},{"location":"model/","title":"Model","text":""},{"location":"model/#files","title":"Files","text":"<ul> <li>simple_model.py: This file contains functions to evaluate different machine learning models by train, testing the models then giving a mean squared error.</li> <li>model.py: This file contains functions to train machine learning models on the whole dataset and make predictions.</li> </ul>"},{"location":"model/#description","title":"Description","text":""},{"location":"model/#simple_modelpy","title":"simple_model.py:","text":"<ul> <li>Provides functions to split data and evaluate models like Random Forest, Decision Tree, and Gradient Boosting.</li> <li>The <code>split_data</code> function splits the data into features and targets.</li> <li>The <code>train_random_forest</code>, <code>train_decision_tree</code>, and <code>train_gradient_boosting</code> functions train Random Forest, Decision Tree, and Gradient Boosting models respectively, and return  mean squared error.</li> </ul>"},{"location":"model/#modelpy","title":"model.py:","text":"<ul> <li>Uses pipelines to preprocess categorical features before training the models.</li> <li>Provides functions to train and make predictions using Random Forest, Decision Tree, and Gradient Boosting models (<code>train_and_predict_rf</code>, <code>train_and_predict_dt</code>, <code>train_and_predict_gb</code>)</li> </ul>"},{"location":"model/#usage","title":"Usage","text":"<ul> <li>Training Models/ Evaluate them:</li> </ul> <p>Use the <code>simple_model.py</code> to train machine learning models on your fashion trend data and evaluate it.</p> <p>Pass the appropriate data and parameters to the functions based on your requirements.</p> <ul> <li>Predictions:</li> </ul> <p>Use the <code>model.py</code> to train machine learning models on your fashion trend data and make predictions on the model chosen by you from the evaluations in the <code>simple_model.py</code>.</p>"},{"location":"model/#example-usage","title":"Example Usage","text":""},{"location":"model/#trend-analysis","title":"Trend Analysis","text":""},{"location":"model/#folder-structure","title":"Folder Structure","text":"<ul> <li> <p>simple_model.py: Contains functions to evaluate different machine learning models by training and testing them, then giving a mean squared error. </p> </li> <li> <p>model.py: Contains functions to train machine learning models on the whole dataset and make predictions.  </p> </li> </ul>"},{"location":"model/#description_1","title":"Description","text":"<ul> <li> <p>simple_model.py: Provides functions to split data and evaluate models like Random Forest, Decision Tree, and Gradient Boosting.  </p> </li> <li> <p><code>split_data</code>: Splits the data into features and targets. </p> </li> <li> <p><code>train_random_forest</code>, <code>train_decision_tree</code>, <code>train_gradient_boosting</code>: Train Random Forest, Decision Tree, and Gradient Boosting models respectively, and return mean squared error. </p> </li> <li> <p>model.py: Uses pipelines to preprocess categorical features before training the models. </p> </li> <li> <p><code>train_and_predict_rf</code>, <code>train_and_predict_dt</code>, <code>train_and_predict_gb</code>: Train and make predictions using Random Forest, Decision Tree, and Gradient Boosting models respectively.  </p> </li> </ul>"},{"location":"model/#usage_1","title":"Usage","text":""},{"location":"model/#training-models-evaluate-them","title":"Training Models/ Evaluate them:","text":"<p>Use <code>simple_model.py</code> to train machine learning models on your fashion trend data and evaluate them. Pass the appropriate data and parameters to the functions based on your requirements.  </p>"},{"location":"model/#predictions","title":"Predictions:","text":"<p>Use <code>model.py</code> to train machine learning models on your fashion trend data and make predictions on the model chosen by you from the evaluations in <code>simple_model.py</code>.  </p>"},{"location":"model/#example-training-and-evaluating-a-random-forest-model","title":"Example: Training and evaluating a Random Forest model","text":""},{"location":"model/#step-1-import-required-libraries","title":"Step 1: Import Required Libraries","text":"<pre><code>from FashionTrendForecasting.trend_analysis.Simple_Model import *  \n\nimport pandas as pd   \n</code></pre> <p>In this step, we import the necessary modules from the FashionTrendForecasting package and the pandas library.  </p>"},{"location":"model/#step-2-prepare-the-data","title":"Step 2: Prepare the Data","text":"<p><pre><code>python df = pd.DataFrame \n</code></pre> Here, we create a pandas DataFrame named <code>df</code>. This DataFrame represents the dataset on which we want to train the Random Forest model.  </p>"},{"location":"model/#step-3-train-and-evaluate-the-random-forest-model","title":"Step 3: Train and Evaluate the Random Forest Model","text":"<p><pre><code>rf_model, rf_mse = train_random_forest(df, test_size=0.2, random_state=42) \n</code></pre> We call the <code>train_random_forest()</code> function to train a Random Forest model on the provided dataset (<code>df</code>). The <code>test_size</code> parameter specifies the proportion of the dataset to include in the test split, and the <code>random_state</code> parameter ensures reproducibility of the results. The function returns the trained Random Forest model (<code>rf_model</code>) and the mean squared error (<code>rf_mse</code>) of the model. </p>"},{"location":"model/#example-making-predictions-using-a-random-forest-model","title":"Example: Making predictions using a Random Forest model","text":""},{"location":"model/#step-1-import-required-libraries_1","title":"Step 1: Import Required Libraries","text":"<p><pre><code>from FashionTrendForecasting.trend_analysis.model import *  \n</code></pre> Here, we import the necessary modules from the FashionTrendForecasting package.  </p>"},{"location":"model/#step-2-prepare-the-data_1","title":"Step 2: Prepare the Data","text":"<p><code>python df = pd.DataFrame</code> </p> <p>Similarly, we create a pandas DataFrame named <code>df</code> to represent the dataset on which we want to make predictions. </p>"},{"location":"model/#step-3-split-data-and-make-predictions","title":"Step 3: Split Data and Make Predictions","text":"<pre><code>X_train, y_train = split_data(df, 'trend_score') y_pred_rf = train_and_predict_rf(X_train, y_train, df, n_estimators=100, random_state=42) \n</code></pre> <p>We use the <code>split_data()</code> function to split the dataset into features (<code>X_train</code>) and target variable (<code>y_train</code>) based on the column <code>'trend_score'</code>. </p>"}]}